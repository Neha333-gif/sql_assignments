--## üìä B. Analytical / Window Functions (30 Questions)

--1. Assign row numbers to customers ordered by credit limit descending.  

select cust_credit_limit, cust_first_name||' '||cust_last_name as names,
row_number() over (order by cust_credit_limit desc) as rn
from sh.customers;


--2. Rank customers within each state by credit limit.  

select cust_state_province, cust_credit_limit, cust_first_name||' '||cust_last_name as names,
rank() over (partition by cust_state_province order by cust_credit_limit desc) as rn_2
from sh.customers;

-- 3. Use DENSE_RANK() to find the top 5 credit holders per country.  

select cust_first_name||' '||cust_last_name as names, cust_credit_limit,
dense_rank() over (order by cust_credit_limit desc) as rn_3
from sh.customers;

-- 4. Divide customers into 4 quartiles based on their credit limit using NTILE(4). 

select  cust_credit_limit,cust_first_name||' '||cust_last_name as names,
ntile(4) over (order by cust_credit_limit desc) as rn_4
from sh.customers;


--5. Calculate a running total of credit limits ordered by customer_id.  

select cust_id,cust_credit_limit,  sum(cust_credit_limit) over (order by cust_id desc) as sum_5
from sh.customers;


--6. Show cumulative average credit limit by country.  

select country_id, avg(cust_credit_limit) over (order by country_id desc) as avg_6
from sh.customers;


--7. Compare each customer‚Äôs credit limit to the previous one using LAG().  

select cust_first_name||' '||cust_last_name as name, cust_credit_limit,
lag(cust_credit_limit) over (order by cust_credit_limit desc) as lag_credit 
from sh.customers;


--8. Show next customer‚Äôs credit limit using LEAD().  

select cust_first_name||' '||cust_last_name as name, cust_credit_limit,
lead(cust_credit_limit) over (order by cust_credit_limit desc) as lead_credit 
from sh.customers;


--9. Display the difference between each customer‚Äôs credit limit and the previous one.  

select cust_first_name||' '||cust_last_name as name, cust_credit_limit,
lag(cust_credit_limit) over (order by cust_credit_limit desc) - cust_credit_limit  as diff_credit 
from sh.customers;

--10. For each country, display the first and last credit limit using FIRST_VALUE() and LAST_VALUE().  

select distinct  country_id, first_value(cust_credit_limit) over (partition by country_id order by cust_credit_limit desc)
 as first_value,last_value(cust_credit_limit) over (partition by country_id order by cust_credit_limit desc) as last_value 
from sh.customers;
-- error


--11. Compute percentage rank (PERCENT_RANK()) of customers based on credit limit.

select cust_first_name||' '||cust_last_name as name, cust_credit_limit,
percent_rank() over (order by cust_credit_limit desc) as lead_credit 
from sh.customers;


--12. Show each customer‚Äôs position in percentile (CUME_DIST() function).  

select cust_first_name||' '||cust_last_name as name, cust_credit_limit,
cume_dist() over (order by cust_credit_limit desc) as lead_credit 
from sh.customers;


--13. Display the difference between the maximum and current credit limit for each customer.  

select cust_first_name||' '||cust_last_name as name, cust_credit_limit,
max(cust_credit_limit) over() - cust_credit_limit as credit_max_diff
from sh.customers;

-- 14. Rank income levels by their average credit limit.  

select cust_income_level, avg(cust_credit_limit) as avg_of_income_level,
rank() over (order by avg(cust_credit_limit) desc) as rn
from sh.customers
group by cust_income_level
order by avg_of_income_level;

--15. Calculate the average credit limit over the last 10 customers (sliding window).  

 select cust_first_name||' '||cust_last_name, cust_id, cust_credit_limit,
 avg(cust_credit_limit) over(order by cust_id rows between 9 preceding and current row) as avg_row
 from sh.customers;

--16. For each state, calculate the cumulative total of credit limits ordered by city.  

select cust_state_province, cust_city, cust_credit_limit,cust_id,
sum(cust_credit_limit) over (partition by cust_state_province order by cust_city, cust_id) 
as rn from sh.customers 
order by cust_state_province, cust_city; 

--17. Find customers whose credit limit equals the median credit limit (use PERCENTILE_CONT(0.5)).  
select cust_id, cust_credit_limit
from sh.customers
where cust_credit_limit = (select percentile_cont(0.5) within
group(order by cust_credit_limit asc));

--18. Display the highest 3 credit holders per state using ROW_NUMBER() and PARTITION BY.

select * from (select cust_first_name||' '||cust_last_name, cust_id, cust_credit_limit,
row_number() over (partition by cust_state_province order by cust_credit_limit desc) as rn
from sh.customers) where rn <= 3; 

--19. Identify customers whose credit limit increased compared to previous row (using LAG).  

select * from (select cust_first_name||' '||cust_last_name, cust_id, cust_credit_limit,
lag(cust_credit_limit) over (order by cust_id ) - cust_credit_limit as lag_res
from sh.customers) where lag_res >= 1;


--20. Calculate moving average of credit limits with a window of 3.  

select cust_id, cust_first_name||' '||cust_last_name as names, cust_credit_limit,
avg(cust_credit_limit) over (order by cust_id rows between 2 preceding and current row) as avg_20
from sh.customers;


 -- 21. Show cumulative percentage of total credit limit per country.  

with cum_per as (select cust_id, country_id, 
sum(cust_credit_limit) over (partition by country_id order by cust_id) as cumulative_total,
sum(cust_credit_limit) over (partition by country_id) as country_total
from sh.customers)
select
cust_id,
country_id,
cumulative_total,
country_total,
round(((cumulative_total*100)/country_total),2) as cum_percentage
from cum_per;

--22. Rank customers by age (derived from CUST_YEAR_OF_BIRTH).  

select cust_year_of_birth, cust_first_name||' '||cust_last_name as names,
rank() over (order by cust_year_of_birth desc) as rn
from sh.customers;


--23. Calculate difference in age between current and previous customer in the same state. 

select cust_year_of_birth, cust_first_name||' '||cust_last_name as names,
lag(cust_year_of_birth) over (order by cust_id desc) - cust_year_of_birth as diff_age
from sh.customers;

-- 24. Use RANK() and DENSE_RANK() to show how ties are treated differently.  
select cust_year_of_birth, cust_first_name||' '||cust_last_name as names,
rank() over (order by cust_year_of_birth desc) as rank_24,
dense_rank() over (order by cust_year_of_birth desc) as dense_rank_24
from sh.customers;

--25. Compare each state‚Äôs average credit limit with country average using window partition.  
with avg_credit as (select country_id, cust_state_province ,
avg(cust_credit_limit) as state_avg,
avg(avg(cust_credit_limit)) over (partition by country_id) as country_avg
from sh.customers
group by cust_state_province, country_id)
select
country_id,
cust_state_province,
state_avg,
country_avg,
country_avg - state_avg as diff_avg_credit
from avg_credit;

--26. Show total credit per state and also its rank within each country.

with state_sum as (select country_id, cust_state_province,
sum(cust_credit_limit) as state_sum
from sh.customers
group by country_id, cust_state_province)
select 
country_id,
cust_state_province,
state_sum,
rank() over (partition by country_id order by state_sum desc) as rank_avg
from state_sum;



--27. Find customers whose credit limit is above the 90th percentile of their income level. 

-error


--28. Display top 3 and bottom 3 customers per country by credit limit.  

with rank_as as (select cust_id, cust_first_name||' '||cust_last_name as names, country_id,
rank() over (partition by country_id order by cust_credit_limit asc) as bottom_3,
rank() over (partition by country_id order by cust_credit_limit desc) as top_3
from sh.customers)
select * from rank_as where bottom_3 <= 3 or top_3 <= 3
order by country_id;



--29. Calculate rolling sum of 5 customers‚Äô credit limit within each country.  

select cust_id, cust_first_name||' '||cust_last_name as names, country_id,
sum(cust_credit_limit) over (partition by country_id order by  cust_id rows between
4 preceding and current row ) as sum_29
from sh.customers
order by country_id, cust_id;


--30. For each marital status, display the most and least wealthy customers using analytical functions.  

with rank_as as (
select cust_id, 
cust_first_name||' '||cust_last_name as names,
cust_marital_status,
cust_credit_limit,
rank() over (partition by cust_marital_status order by cust_credit_limit asc) as least_wealthy,
rank() over (partition by cust_marital_status order by cust_credit_limit desc) as most_wealthy
from sh.customers)
select * from rank_as where least_wealthy <= 1 or most_wealthy <= 1
order by cust_marital_status;

--üß† C. Conditional, CASE, and DECODE (10 Questions)
--1.Categorize customers into income tiers: Platinum, Gold, Silver, Bronze.

select 
   cust_id,
   cust_first_name||' '||cust_last_name as names,
   cust_income_level,
   case
    when cust_income_level  like '%: 30%' then 'bronze'
    when cust_income_level  like '%:50%' or cust_income_level  like '%:70%' then 'silver'
    when cust_income_level  like '%130%' or cust_income_level  like '%150%' or cust_income_level  like '%170%' then 'gold'
    else 'platinum'
    end as income_categories
    from sh.customers;

--2.Display ‚ÄúHigh‚Äù, ‚ÄúMedium‚Äù, or ‚ÄúLow‚Äù income categories based on credit limit.

select 
   cust_id,
   cust_first_name||' '||cust_last_name as names,
   cust_credit_limit,
   case
    when cust_credit_limit > 8000 then 'high'
    when cust_credit_limit between 3000 and 8000 then 'medium'
    else 'low'
    end as income_categories
    from sh.customers;

--3.Replace NULL income levels with ‚ÄúUnknown‚Äù using NVL.
    
 select 
      cust_id,
      cust_first_name||' '||cust_last_name as names,
      cust_income_level,
      nvl(cust_income_level, 'unknown') as income_level
      from sh.customers ;


--4.Show customer details and mark whether they have above-average credit limit or not.

select 
   cust_id,
   cust_first_name||' '||cust_last_name as names,
   cust_credit_limit,
   case
    when cust_credit_limit > 6000 then 'above_average'
    else 'not_above_average'
    end as credit_categories
    from sh.customers;


--5.Use DECODE to convert marital status codes (S/M/D) into full text.

select
   cust_id,
   cust_first_name||' '||cust_last_name as names,
   cust_marital_status,
   decode (cust_marital_status,'single','s',
   'married','m','divorced','d') as marital_status_full
   from sh.customers;


--6.Use CASE to show age group (‚â§30, 31‚Äì50, >50) from CUST_YEAR_OF_BIRTH.

with age_as as 
(select 
   cust_id,
   cust_first_name||' '||cust_last_name as names,
   cust_year_of_birth,
   (2025 - cust_year_of_birth) as age
   from sh.customers)
   select 
       cust_id,
       cust_year_of_birth,
       age,
       case
        when age <= 30 then 'below 30'
        when age between 31 and 50 then 'between 31 and 50'
        else 'greater than 50'
        end as age_status
        from age_as;

--7.Label customers as ‚ÄúOld Credit Holder‚Äù or ‚ÄúNew Credit Holder‚Äù based on year of birth < 1980.

 select 
       cust_id,
       cust_year_of_birth,
       case
        when cust_year_of_birth < 1980 then 'old credit holder'
        else 'new credit holder'
        end as credit_status
        from sh.customers;

--8.Create a loyalty tag ‚Äî ‚ÄúPremium‚Äù if credit limit > 50,000 and income_level = ‚ÄòE‚Äô.

select 
       cust_id,
       cust_credit_limit,
       cust_income_level,
       case
        when cust_credit_limit > 7000 and cust_income_level like 'E%' then 'premium'
        else 'not premium'
        end as loyalty_tag
        from sh.customers where cust_income_level like 'E%';

--9.Assign grades (A‚ÄìF) based on credit limit range using CASE.

   select 
     cust_id,
     cust_first_name||' '||cust_last_name as names,
     cust_credit_limit,
     case
       when cust_credit_limit = 1500 then 'A' 
       when cust_credit_limit = 3000 then 'B'
       when cust_credit_limit = 7000 then 'C' 
       when cust_credit_limit = 9000 then 'D'
       when cust_credit_limit = 11000 then 'E'
       when cust_credit_limit = 15000 then 'F'
       else 'null'  
       end as limit_range
       from sh.customers;



--10. Show country, state, and number of premium customers using conditional aggregation.
   
   select 
     country_id,
     cust_state_province,
     sum(case when cust_credit_limit > 6000 then 1 else 0 end) as premium_credit_case
     from sh.customers 
     group by country_id, cust_state_province
     order by country_id, cust_state_province;
  

