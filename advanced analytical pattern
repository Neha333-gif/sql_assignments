--ðŸ“ˆ G. Advanced Analytical Patterns (10 Questions)
--1.Compute z-score normalization of customer credit limits.

select 
   cust_id,
   cust_first_name||' '||cust_last_name as names,
   (((cust_credit_limit)- avg(cust_credit_limit)over())/stddev(cust_credit_limit)over()) as z_score
   from sh.customers;

--2.Calculate the Gini coefficient of credit limit inequality per country.

with ranked_as as
(select
   cust_id,
   country_id,
   cust_credit_limit,
   cust_first_name||' '||cust_last_name as names,
   rank() over (partition by country_id order by cust_credit_limit desc) as rn,
   count(*)over(partition by country_id ) as n,
   sum(cust_credit_limit) over (partition by country_id) as sum_x
   from sh.customers
)

select 
   country_id,
   round((sum((2*rn - n - 1)*cust_credit_limit)/(n*sum_x)),2) as gini_coefficient
   from ranked_as 
   group by country_id;


--3.Find customers whose credit limit is above the 75th percentile and below the 90th percentile.

with per_limit as 
(select 
percentile_cont(0.75) within group(order by cust_credit_limit)over() as pc_75,
percentile_cont(0.5) within group(order by cust_credit_limit)over() as pc_50
from sh.customers
)
select
   c.cust_id,
   c.cust_first_name||' '||c.cust_last_name as names,
   c.cust_credit_limit
   from sh.customers c
   cross join (select distinct pc_75, pc_50 from per_limit) pct
   where c.cust_credit_limit < pct.pc_75 and c.cust_credit_limit > pct.pc_50;


--4.Use analytical functions to compute the rank difference between two states.

with rank_btw as
(select
  cust_id,
  cust_state_province,
  cust_first_name ||' '|| cust_last_name as names,
  rank() over (partition by cust_state_province order by cust_credit_limit desc) as rn
  from sh.customers)

  select 
    a.cust_id,
    a.cust_state_province as state_1,
    a.names,
    a.rn as state_rank_1,
    b.cust_id,
    b.cust_state_province as state_2,
    b.names,
    b.rn as state_rank_2,
    (a.rn - b.rn) as rank_diff
    from rank_btw a 
    join rank_btw b
    on a.cust_id = b.cust_id;

--5.Find the median and interquartile range of credit limit per state.
select 
   cust_state_province,
   median(cust_credit_limit) as median_tange,
   percentile_cont(0.25) within group (order by cust_credit_limit desc) as per_25,
   percentile_cont(0.75) within group (order by cust_credit_limit desc) as per_75,
   (percentile_cont(0.25) within group (order by cust_credit_limit desc) - 
   percentile_cont(0.75) within group (order by cust_credit_limit desc) ) as iqr
   from sh.customers 
   group by cust_state_province
   order by cust_state_province;

--6.Identify outliers in credit limit using IQR method.

with one_as as 
(select 
    cust_state_province,
    percentile_cont(0.25) within group (order by cust_credit_limit) as q1,
    percentile_cont(0.75) within group (order by cust_credit_limit) as q3
    from sh.customers 
    group by cust_state_province
    ),
    customer_with_bounds as 
    (select 
    c.cust_id,
    c.cust_first_name||' '||c.cust_last_name as names,
    c.cust_state_province,
    c.cust_credit_limit,
    s.q1,
    s.q3,
    (s.q3 - s.q1) as iqr,
    (s.q1 - 1.5 * (s.q3 - s.q1)) as lower_bound,
    (s.q3 + 1.5 * (s.q3 - s.q1)) as upper_bound
    from sh.customers c
    join one_as s
    on c.cust_state_province = s.cust_state_province
    )
    select 
    cust_id,
    names,
    cust_state_province,
    cust_credit_limit,
    lower_bound,
    upper_bound
    from customer_with_bounds
    where cust_credit_limit < lower_bound or
    cust_credit_limit > upper_bound
    order by cust_state_province, cust_credit_limit desc;

--7.Calculate credit limit growth per customer over years (if historical data exists).
with seven_as as (
    select 
       c.cust_id,
       c.cust_first_name||' '||c.cust_last_name as names,
       extract (year from s.time_id) as the_year,
       avg(c.cust_credit_limit) as the_avg
       from sh.customers c
       join sh.sales s
       on c.cust_id = s.cust_id 
       group by c.cust_id, c.cust_first_name, c.cust_last_name, extract (year from s.time_id)),
       growth_calc as (
        select 
        cust_id,
        names,
        the_year,
        the_avg,
        lag(the_avg) over (partition by cust_id order by the_year desc) as prev_credit,
        round((((the_avg - lag(the_avg) over (partition by cust_id order by the_year desc))/
        lag(the_avg) over (partition by cust_id order by the_year desc))*100),2) as growth_percent
        from seven_as)
        select 
           cust_id,
           names,
           prev_credit,
           growth_percent,
           the_year,
           the_avg
           from growth_calc 
           where growth_percent is not null
           order by cust_id, the_year;

    

--8.Create a running average of credit limit by customer ID.

with seven_as as (
    select 
       c.cust_id,
       c.cust_first_name||' '||c.cust_last_name as names,
       to_char(s.time_id,'YYYY-MM') as sale_month,
       avg(c.cust_credit_limit) as avg_credit
       from sh.customers c
       join sh.sales s
       on c.cust_id = s.cust_id 
       group by c.cust_id, c.cust_first_name, c.cust_last_name, to_char(s.time_id,'YYYY-MM'))
       select 
         cust_id,
         names,
         sale_month,
         avg_credit,
         round(avg(avg_credit) over (partition by cust_id order by sale_month 
         rows between unbounded preceding and current row),2) as running_credit
         from seven_as 
         order by cust_id, sale_month;
         
--9.Compute total cumulative credit per income group sorted by rank.

   select 
       cust_id,
       cust_first_name||' '||cust_last_name as names,
       cust_income_level,
       cust_credit_limit,
       sum(cust_credit_limit) over (partition by cust_income_level 
       order by cust_credit_limit desc rows between unbounded 
       preceding and current row) as cum_credit,
       rank() over (partition by cust_income_level 
       order by cust_credit_limit)as rank_in_grp
       from sh.customers ; 


--10.Generate a leaderboard view showing top N customers dynamically using analytic functions.

  with cust_sales as (
    select 
     c.cust_id,
     c.cust_first_name||' '||c.cust_last_name as names,
     sum(s.amount_sold) as total_sales 
     from sh.customers c
     join sh.sales s
     on c.cust_id = s.cust_id
     group by  c.cust_id, c.cust_first_name, c.cust_last_name
  ),
  cust_as as
  (
  select 
    cust_id,
    names,
    total_sales,
    rank() over (order by total_sales desc) as rnk_n
    from cust_sales)
    select 
       cust_id,
       rnk_n
       from cust_as 
       where rnk_n <= 5;
